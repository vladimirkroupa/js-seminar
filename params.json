{"name":"Js-seminar","tagline":"","body":"# Functions\r\n\r\n## Function literal\r\n* [function literal](https://jsbin.com/keyujeq/7/edit?js,console,output)\r\n\r\n## Function is an object\r\n* [function is an object](https://jsbin.com/vuzome/7/edit?js,console,output)\r\n\r\n## Function scope\r\nThere is no block scope in JS, but there is function scope.\r\n\r\n* [no block scope](https://jsbin.com/jayiqa/2/edit?js,console,output)\r\n\r\n* [function scope](https://jsbin.com/fosugi/1/edit?js,console,output)\r\n\r\n## Recursion\r\nThere is no tail call optimization -> limit on depth of recursion.\r\n\r\n* [no tail call optimization](https://jsbin.com/zukowo/1/edit?js,console,output)\r\n\r\n## Arguments\r\nFunction receives extra `arguments` parameter.\r\n\r\n* [arguments object](https://jsbin.com/kivape/4/edit?js,console,output)\r\n\r\n* [arguments object length](https://jsbin.com/lutewa/2/edit?js,console,output)\r\n\r\n* [arguments object no array methods](https://jsbin.com/kuwema/1/edit?js,console,output)\r\n\r\n## Invocation\r\n\r\n> Apart from `arguments` parameter, function receives `this` parameter. Value of `this` is determined by *invocation pattern*.\r\n\r\n### 1. Method Invocation Pattern\r\n\r\n`var a = { fun : console.log };`\r\n\r\n`a.fun('a');`\r\n\r\n> Function stored as property of an object is a *method*. \r\n\r\n> When a method is invoked, `this` is bound to that object.\r\n\r\n* [method invocation](https://jsbin.com/zuniye/1/edit?js,console,output)\r\n\r\n### 2. Function Invocation Pattern\r\n\r\n> When function is not a property of an object, it is invoked as a function.\r\n\r\n`var sum = add(3, 4);`\r\n\r\n> When function is invoked with this pattern, `this` is bound to the global object.\r\n> A consequence of this is that a method cannot employ an inner function to help it.\r\n\r\n* [inner function and this](https://jsbin.com/wapini/1/edit?js,console,output)\r\n* [workaround](https://jsbin.com/jimuxa/1/edit?js,console,output)\r\n\r\n### 3. Constructor Invocation Pattern\r\n\r\n\r\n### 4. Apply Invocation Pattern\r\n\r\n\r\n## Closure\r\nThe closure of the generated functions contain pointers to variables, not a snapshot of the values at the point of definition, meaning that if variables change, these changes are visible from within the function.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}